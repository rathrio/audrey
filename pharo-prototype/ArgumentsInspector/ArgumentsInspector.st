Object subclass: #ArgumentsCollector	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ArgumentsInspector'!!ArgumentsCollector commentStamp: 'Radi 10/23/2018 17:36' prior: 0!I collect objects that occurred as method arguments during runtime and store them for later access.Usage=====To let the  collector know which packages to observe:	ArgumentsCollector observe: #('Gofer-Core').	After triggering some message sends to the observed methods, e.g. by running a relevant test suite, inspect the data with:	ArgumentsCollector data.	To stop observing packages  run:	ArgumentsCollector stopObserving.	To stop observing and clear the data, run:	ArgumentsCollector reset.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ArgumentsCollector class	instanceVariableNames: 'data metaLink'!!ArgumentsCollector class methodsFor: 'accessing' stamp: 'Radi 10/23/2018 17:53'!collectArguments: arguments forNode: methodNode forClass: class	| methodId |		arguments ifNotEmpty: [ 			methodId := class asString , '>>#' , methodNode selector.				      self data		   		at: methodId"		   		ifPresent: [ :argumentSet | argumentSet add: (FLSerializer serializeToByteArray: arguments) ]"				ifPresent: [ :argumentSet | argumentSet add: arguments ]		   		ifAbsentPut: [ Set new ] ].! !!ArgumentsCollector class methodsFor: 'accessing' stamp: 'Radi 10/23/2018 12:44'!data	"Lazily initializes a data dictionary"	data ifNil: [ data := Dictionary new ].	^ data! !!ArgumentsCollector class methodsFor: 'accessing' stamp: 'Radi 10/23/2018 17:54'!reset	self stopObserving.	metaLink := nil.	data := nil.! !!ArgumentsCollector class methodsFor: 'accessing' stamp: 'Radi 10/23/2018 17:37'!metaLink	"Lazily initializes a metaLink that collects arguments when installed"	metaLink		ifNil: [ metaLink := MetaLink new						metaObject: self;						selector: #collectArguments:forNode:forClass:;						arguments: #(#arguments #node #class) ].				^ metaLink! !!ArgumentsCollector class methodsFor: 'accessing' stamp: 'Radi 10/23/2018 17:34'!stopObserving	self metaLink uninstall! !!ArgumentsCollector class methodsFor: 'accessing' stamp: 'Radi 10/23/2018 16:51'!collectArguments: arguments forNode: methodNode forClass2: class	| methodId |		arguments ifNotEmpty: [ 			methodId := class asString , '>>#' , methodNode selector.			"Transcript show: 'Data for ', methodId; cr."				      self data		   		at: methodId		   		ifPresent:			   		[ :argumentCounts | 				     argumentCounts at: arguments 					  ifPresent: [ :count | argumentCounts at: arguments put: (count + 1) ] 					  ifAbsentPut: [ 0 ] ]		   		ifAbsentPut: [ Dictionary new ]						]! !!ArgumentsCollector class methodsFor: 'as yet unclassified' stamp: 'Radi 10/23/2018 17:31'!observe: packageNames	"Pass an array of package names as strings"	| compiledMethods |		compiledMethods := packageNames		flatCollect: [ :packageName | (RPackageOrganizer default packageNamed: packageName) definedClasses flatCollect: #methods ].			compiledMethods do: [ :method | method ast link: self metaLink ].		^ compiledMethods.! !PackageManifest subclass: #ManifestArgumentsInspector	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ArgumentsInspector'!!ManifestArgumentsInspector commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestArgumentsInspector class	instanceVariableNames: ''!!ManifestArgumentsInspector class methodsFor: 'meta-data' stamp: 'Radi 10/23/2018 17:29'!description ^ 'I track method argument objects and store them for later access.'! !